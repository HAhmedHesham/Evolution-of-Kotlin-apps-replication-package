var Verdict = (function (exports) {
    'use strict';

    /* eslint-disable babel/camelcase */
    const EXPERIMENTS = {
        testStandard: {
            variants: [
                {
                    name: "A",
                    size: 10,
                },
                {
                    name: "B",
                    size: 90,
                },
            ],
        },
        testRolloutEnable: {
            rolloutPercentage: 100,
            variants: [
                {
                    name: "A",
                    size: 10,
                },
                {
                    name: "B",
                    size: 90,
                },
            ],
        },
        testRolloutDisable: {
            rolloutPercentage: 0,
            variants: [
                {
                    name: "A",
                    size: 10,
                },
                {
                    name: "B",
                    size: 90,
                },
            ],
        },
        Hatchful_Edit_Button: {
            variants: [
                {
                    name: "a_control",
                    size: 50,
                },
                {
                    name: "b_edit_buttons",
                    size: 50,
                },
            ],
        },
        threef_storename_autogen_intl: {
            variants: [
                {
                    name: "control",
                    size: 50,
                },
                {
                    name: "storename_autogenerate",
                    size: 50,
                },
            ],
        },
        threef_storename_autogen_hp: {
            variants: [
                {
                    name: "control",
                    size: 50,
                },
                {
                    name: "storename_autogenerated",
                    size: 50,
                },
            ],
        },
    };
    /* eslint-enable */

    const logAssignment = (logger, subject, experimentId, variantName) => {
        if ('subjectId' in subject) {
            logger.produce({
                schemaId: 'experiment_assignments/1.0',
                payload: {
                    subjectId: subject.subjectId,
                    experiment: experimentId,
                    group: variantName,
                    sourceApp: '',
                },
            });
        }
        else if ('shopId' in subject && 'userToken' in subject) {
            logger.produce({
                schemaId: 'experiment_assignments_merchant_owned_pii/1.0',
                payload: {
                    userToken: subject.userToken,
                    sessionToken: subject.sessionToken,
                    shopId: subject.shopId,
                    experiment: experimentId,
                    group: variantName,
                    sourceApp: '',
                },
            });
        }
        else if ('userToken' in subject) {
            logger.produce({
                schemaId: 'experiment_assignments_shopify_owned_pii/1.1',
                payload: {
                    userToken: subject.userToken,
                    sessionToken: subject.sessionToken,
                    experiment: experimentId,
                    group: variantName,
                    sourceApp: '',
                },
            });
        }
    };
    // hashVal must be a value in [0, 99]
    const pickVariant = (hashVal, expDefinition) => {
        let sumSoFar = 0;
        for (const variant of expDefinition) {
            sumSoFar += variant.size;
            if (sumSoFar > hashVal) {
                return variant.name;
            }
        }
        // Should not reach here if variant sizes add up to 100.
        return null;
    };
    /**
     * Taken from https://github.com/Shopify/payment-sheet/pull/2067.
     *
     * A small, fast, deterministic, uniformly distributed hash function.
     *
     *
     * @example
     *   getExperimentAssignment(sessionToken, experimentId)
     *
     * @returns
     * Return values from [0, 99] (inclusive on both ends).
     *
     * hashCode algorithm from [1].
     *
     * [1]: https://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
     */
    const getHash = (identifier, salt) => {
        // Get hashCode of identitifer + salt (algorithm from Java)
        const base = identifier + salt;
        let hash = 0;
        for (let i = 0; i < base.length; i++) {
            /* tslint:disable-next-line:no-bitwise */
            hash = ((hash << 5) - hash + base.charCodeAt(i)) | 0;
        }
        // Return values from [0, 99]
        return Math.abs(hash % 100);
    };
    /**
     * experimentId must exist in EXPERIMENTS, otherwise null is returned.
     *
     * If the experiment has a rollout percentage, null is returned if the subject is
     * not part of the rollout.
     *
     * Deterministically returns a variant name of the respective experiment.
     */
    const getVariant = (subjectId, experimentId) => {
        const expDefinition = EXPERIMENTS[experimentId];
        if (!expDefinition) {
            return null;
        }
        if (expDefinition.rolloutPercentage !== undefined) {
            // Use a different hash salt so that rollout assignment is uncorrelated to
            // the variant assignments.
            const hashVal = getHash(subjectId, `_${experimentId}`);
            if (expDefinition.rolloutPercentage < hashVal) {
                return null;
            }
        }
        return pickVariant(getHash(subjectId, experimentId), expDefinition.variants);
    };
    class Verdict {
        constructor(logger) {
            this.logger = logger;
            this.logger = logger;
        }
        getVariant(experimentId, subject) {
            const variantName = getVariant(subject.subjectId, experimentId);
            if (!variantName) {
                // Experiment does not exist or the subject is not part of the rollout.
                return null;
            }
            if (this.logger) {
                logAssignment(this.logger, subject, experimentId, variantName);
            }
            return variantName;
        }
        /**
        * Similar to getVariant above but only for when subjectId == user_token,
        * where user_token is _shopify_y.
        *
        * The assignment is logged via monorail to experiment_assignments_merchant_owned_pii/1.0.
        */
        getVariantForMerchantOwnedPiiUserTokenSubject(experimentId, subject) {
            const variantName = getVariant(subject.userToken, experimentId);
            if (!variantName) {
                // Experiment does not exist or the subject is not part of the rollout.
                return null;
            }
            if (this.logger) {
                logAssignment(this.logger, subject, experimentId, variantName);
            }
            return variantName;
        }
        /**
        * Similar to getVariant above but only for when subjectId == user_token,
        * where user_token is _shopify_y.
        *
        * The assignment is logged via monorail to experiment_assignments_shopify_owned_pii/1.1.
        */
        getVariantForShopifyOwnedPiiUserTokenSubject(experimentId, subject) {
            const variantName = getVariant(subject.userToken, experimentId);
            if (!variantName) {
                // Experiment does not exist or the subject is not part of the rollout.
                return null;
            }
            if (this.logger) {
                logAssignment(this.logger, subject, experimentId, variantName);
            }
            return variantName;
        }
    }

    exports.Verdict = Verdict;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}));
