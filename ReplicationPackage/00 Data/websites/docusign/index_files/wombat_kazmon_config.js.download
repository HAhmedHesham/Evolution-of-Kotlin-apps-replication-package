(function (win, globalKazmonClientNamespace, setTimeout, loc, nav, c, perf, math, windowKazmonClientOptionsObject) {
  c && c.log('DS - use KZC');
  win.ds_enableKZC = true;
  var checkNumber = 0,
    maxCheckNumber = 10,
    timeoutCheckNumber = 2e3,
    kazmonClientOptionsObject = windowKazmonClientOptionsObject || {},
    kazmonClientInstance;

  function getDifference(firstEventNumber, secondEventNumber) {
    return math.abs(firstEventNumber - secondEventNumber);
  }

  function getPerformanceTimingObject(timingObject) {
    return {
      appCache: getDifference(timingObject.fetchStart, timingObject.domainLookupStart),
      dns: getDifference(timingObject.domainLookupStart, timingObject.domainLookupEnd),
      dom: getDifference(timingObject.domLoading, timingObject.domComplete),
      onLoad: getDifference(timingObject.loadEventStart, timingObject.loadEventEnd),
      redirect: getDifference(timingObject.redirectStart, timingObject.redirectEnd),
      request: getDifference(timingObject.requestStart, timingObject.responseStart),
      response: getDifference(timingObject.responseStart, timingObject.responseEnd),
      ssl:
        timingObject.secureConnectionStart === 0
          ? 0
          : getDifference(timingObject.secureConnectionStart, timingObject.connectEnd),
      tcp: getDifference(timingObject.connectStart, timingObject.connectEnd),
      unload: getDifference(timingObject.unloadEventStart, timingObject.unloadEventEnd),
    };
  }

  function getClientContext(kazmonClientOptions) {
    return {
      application: kazmonClientOptions.application,
      environment: drupalSettings.wombatKazmonIntegration.environment,
    };
  }

  function getPerformanceNavigationObject() {
    var navigationObject = perf.navigation,
      navigationTypeString;

    if (navigationObject && navigationObject.type !== undefined && navigationObject.redirectCount !== undefined) {
      switch (navigationObject.type) {
        case 0:
          navigationTypeString = 'Navigation';
          break;

        case 1:
          navigationTypeString = 'Reload';
          break;

        case 2:
          navigationTypeString = 'History';
          break;

        case 255:
          navigationTypeString = 'Unknown';
          break;
      }

      return {
        type: navigationTypeString,
        // eslint-disable-next-line
        redirectCount: navigationObject.redirectCount
      };
    }

    return null;
  }

  function getClientVariables() {
    return {
      Dimension: win.innerWidth + ' x ' + win.innerHeight,
      Host: loc.hostname,
      Path: loc.pathname,
      Search: loc.search,
      Platform: nav.platform,
      UserAgent: nav.userAgent,
    };
  }

  function kazmonClient(kazmonClientOptions) {
    var _this = this;

    kazmonClientOptions = {
      key: kazmonClientOptions.key || 'cdefdbd7-4a44-4e24-ae85-5ed93ba916ec',
      application: kazmonClientOptions.application || 'Wombat',
    };

    function createBaseObject(telemetryTypeString, telemetryEventNameString) {
      var baseObject = {
        telemetryType: telemetryTypeString,
        telemetryData: {
          clientContext: getClientContext(kazmonClientOptions),
        },
      };
      baseObject.telemetryData[telemetryTypeString + 'Category'] = kazmonClientOptions.application;
      baseObject.telemetryData[telemetryTypeString + 'Name'] = telemetryEventNameString;
      return baseObject;
    }

    function createTotalCounterObject(counterNameString, counterDataObject) {
      var dataObject = createBaseObject('counter', counterNameString),
        telemetryObject = dataObject.telemetryData;
      telemetryObject.ranges = [10, 20, 50, 100, 200, 500, 1e3, 2e3, 5e3, 1e4];
      telemetryObject.displayUnit = 'milliseconds';
      telemetryObject.hasInstance = true;
      telemetryObject.hasMeasure = true;
      telemetryObject.hasErrorCount = true;
      telemetryObject.showVolume = false;
      telemetryObject.hideCountChart = false;
      telemetryObject.metrics = [counterDataObject];
      return dataObject;
    }

    function createClientTelemetryObject(clientTelemetryNameString, clientTelemetryDataObject) {
      var dataObject = createBaseObject('event', clientTelemetryNameString),
        telemetryObject = dataObject.telemetryData;
      telemetryObject.eventType = 'DocuSign.Monitoring.ClientTelemetry';
      telemetryObject.data = clientTelemetryDataObject;
      return dataObject;
    }

    _this.createEvent = function (eventNameString, eventDataObject) {
      return createClientTelemetryObject(eventNameString, eventDataObject);
    };

    _this.createCounter = function (counterNameString, counterDataObject) {
      return createTotalCounterObject(counterNameString, counterDataObject);
    };

    _this.report = function (dataObjectToReport) {
      if (dataObjectToReport) {
        var xhttp = new XMLHttpRequest();
        xhttp.open('POST', drupalSettings.wombatKazmonIntegration.endpointUrl, true);
        xhttp.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
        xhttp.setRequestHeader('Authorization', 'kazmon ' + kazmonClientOptions.key);
        xhttp.send(JSON.stringify(dataObjectToReport));
        return true;
      }

      return false;
    };

    return this;
  }

  function initKazmonClient() {
    var timingObject;

    if (perf && (timingObject = perf.timing)) {
      if (checkNumber++ < maxCheckNumber && !timingObject.loadEventEnd && !timingObject.domComplete) {
        return setTimeout(initKazmonClient, timeoutCheckNumber);
      }

      win[globalKazmonClientNamespace] = kazmonClientInstance = new kazmonClient(kazmonClientOptionsObject);
      kazmonClientInstance.report([
        kazmonClientInstance.createEvent('Load Time', {
          total: getDifference(timingObject.navigationStart, timingObject.loadEventEnd),
          ttfb: getDifference(timingObject.requestStart, timingObject.responseStart),
          domContentLoaded: getDifference(timingObject.requestStart, timingObject.domContentLoadedEventStart),
          performanceTiming: getPerformanceTimingObject(timingObject),
          PerformanceNavigation: getPerformanceNavigationObject(),
          ClientVariables: getClientVariables(),
        }),
        kazmonClientInstance.createCounter('Load Time', {
          instance: 'D8',
          measure: getDifference(timingObject.navigationStart, timingObject.loadEventEnd),
          success: true,
        }),
      ]);
    } else {
      /*
      never doing anything if the window performance
      object doesn't exist...
      */
    }
  }

  initKazmonClient();
})(
  window,
  'DS_WOM_KZC',
  setTimeout,
  location,
  navigator,
  console,
  performance,
  Math,
  // eslint-disable-next-line
  window.kazmonClientOptionsObject
  /*
  a possibly set global object in which overwrites
  the Wombat kazmon client's default values
  */
);
