(function(){
var _$sidechain_1 = { exports: {} };
(function (g, f) {
  typeof _$sidechain_1.exports === 'object' && "object" !== 'undefined' ? _$sidechain_1.exports = f() : typeof define === 'function' && define.amd ? define(f) : (g = g || self, g.Sidechain = f());
})(this, function () {
  'use strict';

  var decodeLegacy = function (message) {
    var matcher = /pymxPYMx(.*?)xPYMx(.*?)xPYMx(.*)/;
    var matched = message.match(matcher);
    if (!matched) return {};
    var [_, id, type, value] = matched;
    return {
      type,
      value,
      sentinel: "pym"
    };
  };

  var decode = function (message) {
    if (message.match(/^pym/)) {
      return decodeLegacy(message);
    }

    return JSON.stringify(message);
  };

  var encodeLegacy = function (id, param, value) {
    return ["pym", id, param, value].join("xPYMx");
  };

  class SidechainGuest {
    constructor(options = {}) {
      var here = new URL(window.location);
      this.id = options.id || here.searchParams.get("childId");
      this.options = options;
      this.lastHeight = 0;
      this.listeners = {};
      this.sendHeight = this.sendHeight.bind(this);
      this.onMessage = this.onMessage.bind(this);
      window.addEventListener("resize", this.sendHeight);
      window.addEventListener("message", this.onMessage);

      if (!options.disablePolling) {
        setInterval(() => this.sendHeight(), options.polling || 300);
      }

      this.sendHeight();
    }

    sendMessage(message) {
      if (typeof message == "object" && !(message instanceof Array)) {
        if (this.options.sentinel && !message.sentinel) {
          message.sentinel = this.options.sentinel;
        }
      }

      window.parent.postMessage(message, "*");
    }

    sendLegacy(param, value) {
      var pymFormatted = encodeLegacy(this.id, param, value);
      window.parent.postMessage(pymFormatted, "*");
    }

    on(event, callback) {
      if (!this.listeners[event]) this.listeners[event] = [];
      this.listeners[event].push(callback);
    }

    off(event, callback) {
      if (!callback) {
        delete this.listeners[event];
      } else {
        this.listeners[event] = this.listeners[event].filter(c => c != callback);
      }
    }

    onMessage(e) {
      var decoded = typeof e.data == "string" ? decode(e.data) : e.data;

      if (decoded.sentinel == "pym" && decoded.type in this.listeners) {
        this.listeners[decoded.type].forEach(cb => cb(decoded.value));
      }
    }

    sendHeight() {
      var height = document.documentElement.offsetHeight;
      if (this.lastHeight == height) return;
      this.lastHeight = height;
      var pymFormatted = encodeLegacy(this.id, "height", height); // for convenience, we just use the same format as AMP

      var ampFormatted = {
        sentinel: "amp",
        type: "embed-size",
        height
      };
      this.sendMessage(pymFormatted);
      this.sendMessage(ampFormatted);
    }

  }

  class Sidechain extends HTMLElement {
    constructor() {
      super();
      var iframe = this.iframe = document.createElement("iframe");
      iframe.style.width = "100%";
      iframe.style.border = "none";
      iframe.setAttribute("seamless", "true");
      iframe.setAttribute("scrolling", "no");
      this.onMessage = this.onMessage.bind(this);
    }

    connectedCallback() {
      if (!this.iframe.parentElement) {
        this.style.display = "block";
        var root = this.attachShadow ? this.attachShadow({
          mode: "open"
        }) : this;
        root.appendChild(this.iframe);
      }

      window.addEventListener("message", this.onMessage);
    }

    disconnectedCallback() {
      window.removeEventListener("message", this.onMessage);
    }

    static get observedAttributes() {
      return ["src", "id"];
    }

    attributeChangedCallback(attribute, was, value) {
      switch (attribute) {
        case "src":
          this.iframe.src = value;
          break;

        case "id":
          this.iframe.id = value;
      }
    }

    onMessage(e) {
      // ignore other iframes
      if (e.source != this.iframe.contentWindow) return;
      var decoded = typeof e.data == "string" ? decode(e.data) : e.data;

      if (decoded.type == "embed-size" || decoded.type == "height") {
        this.iframe.height = decoded.value || decoded.height;
      }
    }

    sendMessage(message) {
      if (typeof message == "object" && !(message instanceof Array) && this.hasAttribute("sentinel")) {
        message.sentinel = message.sentinel || this.getAttribute("sentinel");
      }

      this.iframe.contentWindow.postMessage(message, "*");
    }

    sendLegacy(param, value) {
      var pymFormatted = encodeLegacy(this.id, param, value);
      this.sendMessage(pymFormatted);
    }

    static registerGuest(options) {
      return new SidechainGuest(options);
    }

    static matchMessage(pattern, callback) {
      return function (e) {
        var {
          data
        } = e;

        for (var k in pattern) {
          if (data[k] !== pattern[k]) return;
        }

        callback(e.data, e);
      };
    }

  }

  try {
    customElements.define("side-chain", Sidechain);
  } catch (err) {
    console.log("Sidechain couldn't be (re)defined");
  }

  return Sidechain;
});

_$sidechain_1 = _$sidechain_1.exports
/*

Custom element base class. Provides utility methods and common code patterns.

*/
class ElementBase extends HTMLElement {
  constructor() {
    super(); // new.target is the current constructor function

    var def = new.target; // bind methods for events to the current element

    if (def.boundMethods) {
      def.boundMethods.forEach(f => this[f] = this[f].bind(this));
    } // these properties will update their attributes


    if (def.mirroredProps) {
      def.mirroredProps.forEach(p => Object.defineProperty(this, p, {
        get() {
          this.getAttribute(p);
        },

        set(v) {
          this.setAttribute(p, v);
          return v;
        }

      }));
    }
  } // send an event up the tree


  dispatch(event, detail) {
    var e = new CustomEvent(event, {
      bubbles: true,
      composed: true,
      detail
    });
    this.dispatchEvent(e);
  } // catch and halt an event
  // useful for modifying and re-dispatching events


  capture(event, listener) {
    this.addEventListener(event, function (e) {
      e.stopPropagation();
      listener(e);
    });
  } // looks for a static template getter on the class
  // injects that HTML into the element's light DOM
  // returns a hash of "data-as" elements
  // this is memoized and will only "run" once


  illuminate() {
    var template = this.constructor.template;
    this.innerHTML = template;
    var manuscript = {};
    var landmarks = this.querySelectorAll("[data-as]");

    for (var l of landmarks) {
      var key = l.dataset.as;
      manuscript[key] = l;
    }

    this.illuminate = () => manuscript;

    return manuscript;
  } // handle registration


  static define(tag) {
    try {
      window.customElements.define(tag, this);
    } catch (err) {
      console.log("Couldn't (re)define " + tag + " element");
    }
  }

}

var _$ElementBase_4 = ElementBase;

var _$doT_2 = { exports: {} };
// doT.js
// 2011-2014, Laura Doktorova, https://github.com/olado/doT
// Licensed under the MIT license.
(function () {
  "use strict";

  var doT = {
    name: "doT",
    version: "1.1.1",
    templateSettings: {
      evaluate: /\{\{([\s\S]+?(\}?)+)\}\}/g,
      interpolate: /\{\{=([\s\S]+?)\}\}/g,
      encode: /\{\{!([\s\S]+?)\}\}/g,
      use: /\{\{#([\s\S]+?)\}\}/g,
      useParams: /(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,
      define: /\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,
      defineParams: /^\s*([\w$]+):([\s\S]+)/,
      conditional: /\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,
      iterate: /\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,
      varname: "it",
      strip: true,
      append: true,
      selfcontained: false,
      doNotSkipEncoded: false
    },
    template: undefined,
    //fn, compile template
    compile: undefined,
    //fn, for express
    log: true
  },
      _globals;

  doT.encodeHTMLSource = function (doNotSkipEncoded) {
    var encodeHTMLRules = {
      "&": "&#38;",
      "<": "&#60;",
      ">": "&#62;",
      '"': "&#34;",
      "'": "&#39;",
      "/": "&#47;"
    },
        matchHTML = doNotSkipEncoded ? /[&<>"'\/]/g : /&(?!#?\w+;)|<|>|"|'|\//g;
    return function (code) {
      return code ? code.toString().replace(matchHTML, function (m) {
        return encodeHTMLRules[m] || m;
      }) : "";
    };
  };

  _globals = function () {
    return this || (0, eval)("this");
  }();
  /* istanbul ignore else */


  if ("object" !== "undefined" && _$doT_2.exports) {
    _$doT_2.exports = doT;
  } else if (typeof define === "function" && define.amd) {
    define(function () {
      return doT;
    });
  } else {
    _globals.doT = doT;
  }

  var startend = {
    append: {
      start: "'+(",
      end: ")+'",
      startencode: "'+encodeHTML("
    },
    split: {
      start: "';out+=(",
      end: ");out+='",
      startencode: "';out+=encodeHTML("
    }
  },
      skip = /$^/;

  function resolveDefs(c, block, def) {
    return (typeof block === "string" ? block : block.toString()).replace(c.define || skip, function (m, code, assign, value) {
      if (code.indexOf("def.") === 0) {
        code = code.substring(4);
      }

      if (!(code in def)) {
        if (assign === ":") {
          if (c.defineParams) value.replace(c.defineParams, function (m, param, v) {
            def[code] = {
              arg: param,
              text: v
            };
          });
          if (!(code in def)) def[code] = value;
        } else {
          new Function("def", "def['" + code + "']=" + value)(def);
        }
      }

      return "";
    }).replace(c.use || skip, function (m, code) {
      if (c.useParams) code = code.replace(c.useParams, function (m, s, d, param) {
        if (def[d] && def[d].arg && param) {
          var rw = (d + ":" + param).replace(/'|\\/g, "_");
          def.__exp = def.__exp || {};
          def.__exp[rw] = def[d].text.replace(new RegExp("(^|[^\\w$])" + def[d].arg + "([^\\w$])", "g"), "$1" + param + "$2");
          return s + "def.__exp['" + rw + "']";
        }
      });
      var v = new Function("def", "return " + code)(def);
      return v ? resolveDefs(c, v, def) : v;
    });
  }

  function unescape(code) {
    return code.replace(/\\('|\\)/g, "$1").replace(/[\r\t\n]/g, " ");
  }

  doT.template = function (tmpl, c, def) {
    c = c || doT.templateSettings;
    var cse = c.append ? startend.append : startend.split,
        needhtmlencode,
        sid = 0,
        indv,
        str = c.use || c.define ? resolveDefs(c, tmpl, def || {}) : tmpl;
    str = ("var out='" + (c.strip ? str.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g, " ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g, "") : str).replace(/'|\\/g, "\\$&").replace(c.interpolate || skip, function (m, code) {
      return cse.start + unescape(code) + cse.end;
    }).replace(c.encode || skip, function (m, code) {
      needhtmlencode = true;
      return cse.startencode + unescape(code) + cse.end;
    }).replace(c.conditional || skip, function (m, elsecase, code) {
      return elsecase ? code ? "';}else if(" + unescape(code) + "){out+='" : "';}else{out+='" : code ? "';if(" + unescape(code) + "){out+='" : "';}out+='";
    }).replace(c.iterate || skip, function (m, iterate, vname, iname) {
      if (!iterate) return "';} } out+='";
      sid += 1;
      indv = iname || "i" + sid;
      iterate = unescape(iterate);
      return "';var arr" + sid + "=" + iterate + ";if(arr" + sid + "){var " + vname + "," + indv + "=-1,l" + sid + "=arr" + sid + ".length-1;while(" + indv + "<l" + sid + "){" + vname + "=arr" + sid + "[" + indv + "+=1];out+='";
    }).replace(c.evaluate || skip, function (m, code) {
      return "';" + unescape(code) + "out+='";
    }) + "';return out;").replace(/\n/g, "\\n").replace(/\t/g, '\\t').replace(/\r/g, "\\r").replace(/(\s|;|\}|^|\{)out\+='';/g, '$1').replace(/\+''/g, ""); //.replace(/(\s|;|\}|^|\{)out\+=''\+/g,'$1out+=');

    if (needhtmlencode) {
      if (!c.selfcontained && _globals && !_globals._encodeHTML) _globals._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);
      str = "var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : (" + doT.encodeHTMLSource.toString() + "(" + (c.doNotSkipEncoded || '') + "));" + str;
    }

    try {
      return new Function(c.varname, str);
    } catch (e) {
      /* istanbul ignore else */
      if (typeof console !== "undefined") console.log("Could not create a template function: " + str);
      throw e;
    }
  };

  doT.compile = function (tmpl, def) {
    return doT.template(tmpl, null, def);
  };
})();

_$doT_2 = _$doT_2.exports
// NOTE: install dot from NPM before using this module
// duplicates EJS templating for the client, so we can share with the build process
/* removed: var _$doT_2 = require("dot"); */;

_$doT_2.templateSettings.varname = "data";
_$doT_2.templateSettings.selfcontained = true;
_$doT_2.templateSettings.evaluate = /<%([\s\S]+?)%>/g;
_$doT_2.templateSettings.interpolate = /<%=([\s\S]+?)%>/g;
var _$dot_5 = _$doT_2;

var _$_headlines_3 = "<%\n  var classify = function(str) {\n    return str\n      .toLowerCase()\n      .replace(/\\s+/g, \"-\")\n      .replace(/\\-\\-+/g, \"-\")\n      .replace(/^-+|[^\\w\\-]|-+$/g, \"\");\n  };\n%>\n<% data.headlines.forEach(function(h, i) { %>\n<li class=\"story\">\n  <h3><a href=\"<%= h.link %>\"><%= h.headline %></a></h3>\n  <span class=\"meta\">\n    <% if (h.showTimestamps) { %>\n    <%= h.relative %>\n    <% } %>\n    <% if (h.flag) { %>\n      &nbsp;&nbsp;|&nbsp;&nbsp;<span class=\"flag <%= classify(h.flag) %>\"><%= h.flag %></span>\n    <% } %>\n  </span>\n</li>\n<% }); %>\n"
var $ = (s, d = document) => Array.prototype.slice.call(d.querySelectorAll(s));

$.one = (s, d = document) => d.querySelector(s);

var _$$_6 = $;

//module for interfacing with GA

/**
@param [category] - usually "interaction"
@param action - what happened
@param [label] - not usually visible in dashboard, defaults to title or URL
*/
var DIMENSION_PARENT_URL = 'dimension1';
var DIMENSION_PARENT_HOSTNAME = 'dimension2';
var DIMENSION_PARENT_INITIAL_WIDTH = 'dimension3';
var a = document.createElement("a");
var slug = window.location.pathname.replace(/^\/|\/$/g, "");

var track = function (eventCategory, eventAction, eventLabel, eventValue) {
  var event = {
    eventCategory,
    eventAction,
    eventLabel,
    eventValue,
    hitType: "event"
  };
  console.log("Tracking: " + eventAction + " / " + eventLabel + " / " + eventValue);
  var search = window.location.search.replace(/^\?/, "");
  var query = {};
  search.split("&").forEach(pair => {
    var [key, value] = pair.split("=");
    query[key] = value;
  });
  var parentURL = query.parentUrl;
  a.href = parentURL;
  var hostname = a.hostname;
  event[DIMENSION_PARENT_URL] = parentURL;
  event[DIMENSION_PARENT_HOSTNAME] = hostname;
  if (window.ga) ga("send", event);
};

var _$track_7 = track;

var apMonths = ["Jan.", "Feb.", "March", "April", "May", "June", "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec."];
var timezones = [{
  re: /\(eastern/i,
  zone: "ET"
}, {
  re: /\(central/i,
  zone: "CT"
}, {
  re: /\(mountain/i,
  zone: "MT"
}, {
  re: /\(pacific/i,
  zone: "PT"
}];
var monthLengths = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

var inDays = function (dateString) {
  var [m, d, y] = dateString.split("/").map(Number);
  var days = 0;

  for (var i = 0; i < m - 1; i++) {
    days += monthLengths[i];
  }

  days += d;
  return days;
};

var formatAPDate = date => apMonths[date.getMonth()] + " " + date.getDate() + ", " + date.getFullYear();

var formatTime = function (date) {
  var h = date.getHours();
  var m = date.getMinutes().toString().padStart(2, "0");
  var suffix = h > 12 ? "p.m." : "a.m.";
  var offset = date.getTimezoneOffset() / 60;
  var zone = "";

  if (offset >= 5 && offset < 9) {
    var ts = date.toTimeString();
    var match = timezones.filter(tz => ts.match(tz.re)).pop();
    if (match) zone = " " + match.zone;
  }

  if (h > 12) {
    h -= 12;
  } else if (h == 0) {
    h = 12;
  }

  return h + ":" + m + " " + suffix + zone;
};

var parseNPRDate = function (d) {
  var [m, d, y] = d.split("/");
  return new Date(y, m - 1, d);
};

var groupBy = function (list, key) {
  var grouped = {};
  list.forEach(function (item) {
    var value = item[key];
    if (!grouped[value]) grouped[value] = [];
    grouped[value].push(item);
  });
  return grouped;
}; // sort of like d3.data but for data -> elements
// returns a zipped array of [data, element] pairs


var mapToElements = function (root, array, element = "div", keyField = "id") {
  var children = Array.from(root.children);
  var binding = new Map();
  array.forEach(function (item) {
    var [child] = children.filter(c => c.dataset.key == item[keyField]);

    if (!child) {
      // create a node and append it
      child = typeof element == "function" ? element(item) : document.createElement(element);
      child.dataset.key = item[keyField];
      children.push(child);
      root.appendChild(child);
    }

    binding.set(child, item);
    binding.set(item, child);
  }); // remove deleted children

  children.forEach(function (child) {
    if (!binding.has(child)) {
      root.removeChild(child);
    }
  }); // sort children to match array order

  children = Array.from(root.children);
  var pairs = array.map(function (item, i) {
    var child = binding.get(item);
    var childIndex = children.indexOf(child);

    if (childIndex != i) {
      var next = children[i + 1];

      if (next) {
        root.insertBefore(child, next);
      } else {
        root.appendChild(child);
      }
    }

    return [item, child];
  });
  return pairs;
};

var toggleAttribute = function (element, attribute, force) {
  var toggle = !element.hasAttribute(attribute);
  var enable = typeof force == "undefined" ? toggle : force;

  if (enable) {
    element.setAttribute(attribute, "");
  } else {
    element.removeAttribute(attribute);
  }
};

var _$utils_10 = {
  apMonths,
  inDays,
  formatAPDate,
  formatTime,
  parseNPRDate,
  groupBy,
  mapToElements,
  toggleAttribute
};

var _$liveblogHeadlines_8 = {};
/* removed: var _$ElementBase_4 = require("./element-base"); */;

/* removed: var _$dot_5 = require("./lib/dot"); */;

var template = _$dot_5.compile(_$_headlines_3);

/* removed: var _$$_6 = require("./lib/qsa"); */;

/* removed: var _$track_7 = require("./lib/tracking"); */;

var {
  formatTime: __formatTime_8,
  formatAPDate: __formatAPDate_8
} = _$utils_10;

var defaultRefresh = 60;
var ago = {
  minute: 1000 * 60,
  hour: 1000 * 60 * 60,
  day: 1000 * 60 * 60 * 24,
  week: 1000 * 60 * 60 * 24 * 7
};

var relativeTime = function (timestamp) {
  var now = Date.now();
  var delta = now - timestamp;

  if (delta > ago.week) {
    return __formatAPDate_8(new Date(timestamp));
  }

  var pluralize = (word, count) => count == 1 ? word : word + "s";

  for (var d of ["week", "day", "hour", "minute"]) {
    var duration = ago[d];

    if (delta > duration) {
      var count = delta / duration | 0;
      return [count, pluralize(d, count), "ago"].join(" ");
    }
  }

  return "Less than a minute ago";
};

class LiveblogHeadlines extends _$ElementBase_4 {
  constructor() {
    super();
    this.interval = null;
  }

  static get boundMethods() {
    return ["load"];
  }

  static get observedAttributes() {
    return ["src", "href", "headline"];
  }

  connectedCallback() {
    if (this.interval) clearInterval(this.interval);
    this.interval = setInterval(this.load, defaultRefresh * 1000);
  }

  disconnectedCallback() {
    if (this.interval) clearInterval(this.interval);
    this.interval = null;
  }

  attributeChangedCallback(attr, was, value) {
    switch (attr) {
      case "headline":
        var {
          headline
        } = this.illuminate();

        if (value.trim() == "Morning Edition Live") {
          headline.innerHTML = '<img src="./assets/logo-morning-edition.svg" alt="Morning Edition"><span class="live-bug">Live</a>';
          headline.classList.add("morning-edition");
        } else if (value.trim() == "Latest Updates: The Tokyo Olympics") {
          headline.classList.add("tokyo-olympics");
          headline.innerHTML = value.trim();
        } else {
          headline.innerHTML = value.trim();
        }

        break;

      default:
        this.load();
    }
  }

  getDocument(url) {
    return new Promise(function (ok, fail) {
      var xhr = new XMLHttpRequest();
      xhr.responseType = "document";
      xhr.open("GET", url);
      xhr.send();

      xhr.onload = function () {
        ok(xhr.response);
      };

      xhr.onerror = fail;
    });
  }

  async load() {
    var elements = this.illuminate();
    var src = this.getAttribute("src");
    var href = this.getAttribute("href");

    if (!href) {
      href = src.replace(/\/[^\/]+$/, "/");
    }

    elements.moreLink.href = elements.titleLink.href = href;
    var rss = await this.getDocument(src);
    var timestamps = true;

    if (this.hasAttribute("timestamps")) {
      if (this.getAttribute("timestamps") == "false") {
        timestamps = false;
      }
    }

    var headlines = _$$_6("item", rss).map(function (element) {
      var tags = _$$_6("category", element).map(c => c.innerHTML);
      var [flag] = tags.filter(t => t == "Fact Check" || t == "Major Development");
      var showTimestamps = timestamps;
      var pubDate = _$$_6.one("pubDate", element).innerHTML;
      var date = Date.parse(pubDate);
      var relative = relativeTime(date);
      var articleURL = _$$_6.one("link", element).textContent;
      var link = new URL(articleURL); // remove UTM parameters

      ["utm_medium", "utm_campaign"].forEach(p => link.searchParams.delete(p));
      link = link.toString();
      return {
        headline: _$$_6.one("title", element).innerHTML,
        link,
        date,
        relative,
        tags,
        flag,
        showTimestamps
      };
    });
    var max = this.hasAttribute("max") ? this.getAttribute("max") : 6; // console.log(this.getAttribute("max"), max);

    headlines = headlines.sort((a, b) => b.date - a.date).slice(0, max);
    elements.headlines.innerHTML = template({
      headlines,
      formatAPDate: __formatAPDate_8,
      formatTime: __formatTime_8
    });
    _$$_6("a", elements.headlines).forEach(function (a) {
      a.addEventListener("click", () => _$track_7("liveblogs homepage module", "click link", a.href));
    });
  }

  static get template() {
    return "\n<div class=\"title\">\n  <a data-as=\"titleLink\">\n    <h2 data-as=\"headline\">\n      This Just In\n    </h2>\n  </a>\n  <a data-as=\"moreLink\" class=\"more\">More &rsaquo;</a>\n</div>\n\n<ol data-as=\"headlines\">";
  }

}

LiveblogHeadlines.define("liveblog-headlines");

var _$main_9 = {};
/* removed: var _$sidechain_1 = require("@nprapps/sidechain"); */;

var guest = _$sidechain_1.registerGuest(); // load the various result elements

_$liveblogHeadlines_8;

document.body.addEventListener("click", function (e) {
  var target = e.target;
  var link = target.closest("a[href]");

  if (link) {
    var href = link.getAttribute("href");
    guest.sendLegacy("pjax-navigate", href);
    console.log("Dispatching pjax-navigate for " + href);
    e.preventDefault();
  }
});

}());
//# sourceMappingURL=app.js.map
